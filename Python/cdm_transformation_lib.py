"""This library contains functions for transforming the XML files generated
by Islandora's CONTENTdm to MODS Staging module. This file is not intended
to be used directly, but as a library from which transformation scripts
can import functions. For an example of a transformation script, see 
'underwood_transformations.py'. To create a new transformation script, use
'collection_transformations_template.py'."""

from bs4 import BeautifulSoup

def ingest_xml(file_to_transform):
    """Open XML file and return a BeautifulSoup object.

    Parameters
    ----------
    file_to_transform : str
        The path to the XML file.
    
    Returns
    -------
    bs4.BeautifulSoup
        The BeautifulSoup representation of the XML file.
    """
    with open(file_to_transform, "r", encoding="utf-8") as fh:
        in_file = fh.read()
    soup = BeautifulSoup(in_file, "xml")

    return soup


def save(soup, out_file):
    """Save a BeautifulSoup object as an XML file.

    Parameters
    ----------
    soup : bs4.BeautifulSoup
        The BeautifulSoup object to be saved.

    out_file : str
        The path to the XML output file.
    
    Returns
    -------
    Null
    """
    with open(out_file, "w", encoding="utf-8") as fh:
        fh.write(soup.prettify())


def add_typeOfResource(soup):
    """Adds a typeOfResource tag after genre tags with
    an 'authority' attribute that has the value 'dct'.

    MODS typeOfResource tags use a MODS-defined controlled
    vocabulary, which is outlined here:
    http://www.loc.gov/standards/mods/userguide/typeofresource.html.
    This vocabulary can generally be mapped from the 
    near-equivalent Dublin Core type field, following
    these Library of Congress guidelines:
    http://www.loc.gov/standards/mods/mods-dcsimple.html.

    Currently, this function only maps the DC terms "Text" to "text"
    and "Image" and "StillImage" to "still image". This may need to
    be expanded or altered for different collections.

    Parameters
    ----------
    soup : bs4.BeautifulSoup
        The BeautifulSoup object to be modified.
    
    Returns
    -------
    bs4.BeautifulSoup
        The modified BeautifulSoup object.
    """
    dct_types = soup.find_all ("genre", {"authority": "dct"})

    for t in dct_types:
        type_of_resource = soup.new_tag("typeOfResource")
        if t.string:
            if t.string.lower() == "text":
                type_of_resource.string = "text"
            elif t.string.lower() == "image" or t.string.lower() == "stillimage":
                type_of_resource.string = "still image"
        
        t.insert_after(type_of_resource)

    return soup


def remove_extra_quotes(tag, soup):
    """Remove double-quotes from a tag's text.

    CONTENTdm has an odd behavior of adding quote marks around quote marks,
    at least in the title field. This results in titles that contain parts
    like this '&amp;quot;&amp;quot;Me Sister Annie,&amp;quot;&amp;quot;' in
    the preprocessed files generated by the CONTENTdm to MODS Staging module
    in Islandora. These take the form of '&quot;&quot;Me Sister Annie,&quot;
    &quot;' in the string-representation of a tag's content used in 
    BeautifulSoup.

    This function replaces '&quot;&quot;' with a single double quote ('"').

    Parameters
    ----------
    tag: str
        The name of the tag to fix quotes in.

    soup : bs4.BeautifulSoup
        The BeautifulSoup object to be modified.

    Returns
    -------
    bs4.BeautifulSoup
        The modified BeautifulSoup object.
    """
    tags_to_fix = soup.find_all(tag)
    bad_quotes = "&quot;&quot;"
    good_quote = '"'

    for t in tags_to_fix:
        if t.string:
            t.string = t.string.replace(bad_quotes, good_quote)

    return soup


def split_identifiers(soup):
    """Split combined identifier fields.

    When ARKS identifiers were added to digital objects, they were added to
    the pre-existing identifier field that already had a local identifier
    like '0694b001f001i014'. The two identifiers were seperated by a "<br>"
    tag.

    This function takes these combined identifiers, which have the attribute
    'type="local-and-arks"', and splits them into two new identifier fields
    with the type of 'local' for the local identifier and 'arks' for the ARKS
    identifier. Some fields only have a local identifier (generally, these
    are parts of a compound object.) In such cases, only a new local identifier
    field is added. In all cases, the 'local-and-arks' identifier field is
    removed.

    Parameters
    ----------
    soup : bs4.BeautifulSoup
        The BeautifulSoup object to be modified.
    
    Returns
    -------
    bs4.BeautifulSoup
        The modified BeautifulSoup object.
    """
    local_and_arks = soup.find_all("identifier", {"type": "local-and-arks"})

    for identifier in local_and_arks:
        if "http" not in identifier.string:
            identifier["type"] = "local"
        else:
            if "<br>" not in identifier.string:
                identifier["type"] = "ark"
            else:
                ids = identifier.string.split("<br>")
                id1, id2 = ids[0], ids[1]
                new_id = soup.new_tag("identifier")
                new_id["type"] = "ark"

                identifier["type"] = "local"
                if "http" in id1:
                    identifier.string = id2
                    new_id.string = id1
                else:
                    identifier.string = id1
                    new_id.string = id2

                identifier.insert_after(new_id)
    
    return soup